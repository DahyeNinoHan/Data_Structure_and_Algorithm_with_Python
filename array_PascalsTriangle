Problem: Pascal's Triangle
Problem Statement:
Given an integer numRows, return the first numRows of Pascal's triangle.
In Pascal's triangle, each number is the sum of the two numbers directly above it as shown:


Approach
Steps:
First, create a matrix filled with 0.
Second, make 1 on all elements in matrix [i][0] and matrix[i][i]  
Thrid,(i-1, j-1) + (i-1, j) = (i,j)


Code Implementation:
class Solution:
    def generate(self, numRows: int) -> List[List[int]]:
        matrix=[]
        # Create a numRow*numRow matrix filled with 0
        # matrix = [[0]*(i+1)] for i in range(numrows)
        for i in range(numRows):
            row = [0]*(i+1) # 각 행을 0으로 초기화,  길이는 i+1
            matrix.append(row) # 생성한 행을 matrix에 추가

        # Make 1 on all elements in first column
        # Make 1 on matrix[i][i] 
        for i in range(numRows):
            matrix[i][0]=1
            matrix[i][i]=1

        # (i-1, j-1) + (i-1, j) = (i,j)
        for i in range (2,numRows):
            for j in range (1, i):
                matrix[i][j]=matrix[i-1][j-1]+matrix[i-1][j]
        return matrix
            
a=Solution()
numRows=5
a.generate(numRows)


** Optimal **

import math

def nCr(n, r):
    res = 1

    # calculating nCr:
    for i in range(r):
        res = res * (n - i)
        res = res // (i + 1)

    return res

def pascalTriangle(r, c):
    element = nCr(r - 1, c - 1)
    return element

if __name__ == '__main__':
    r = 5 # row number
    c = 3 # col number
    element = pascalTriangle(r, c)
    print(f"The element at position (r,c) is: {element}")
    
        
        


** Chedan **

class Solution:
    def generate(self, numRows: int) -> List[List[int]]:
        pascals = []
        for row in range(0, numRows):
            pascals.append([1]*(row+1))
            for col in range(1, row):
                pascals[row][col] = pascals[row-1][col-1] + pascals[row-1][col]
        
        return pascals
